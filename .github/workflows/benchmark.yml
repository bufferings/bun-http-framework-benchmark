name: Benchmark

on:
    workflow_dispatch:
        inputs:
            time:
                description: 'Benchmark duration in seconds'
                required: false
                default: '30'
                type: string
            connections:
                description: 'Number of concurrent connections'
                required: false
                default: '64'
                type: string
    push:
        branches:
            - main
        paths:
            - 'src/**'
            - 'bench.ts'
            - '.github/workflows/benchmark.yml'

jobs:
    setup:
        name: Setup Framework List
        runs-on: ubuntu-latest
        timeout-minutes: 5
        outputs:
            frameworks: ${{ steps.list.outputs.frameworks }}
        steps:
            - uses: actions/checkout@v4

            - name: Setup Bun
              uses: oven-sh/setup-bun@v2
              with:
                  bun-version: latest

            - name: List frameworks
              id: list
              run: |
                  FRAMEWORKS=$(bun run scripts/list-frameworks.ts)
                  echo "frameworks=$FRAMEWORKS" >> $GITHUB_OUTPUT
                  echo "Found frameworks: $FRAMEWORKS"

    benchmark:
        name: Benchmark ${{ matrix.framework }}
        needs: setup
        runs-on: ubuntu-24.04-arm
        timeout-minutes: 20
        strategy:
            fail-fast: false
            matrix:
                framework: ${{ fromJson(needs.setup.outputs.frameworks) }}
        steps:
            - uses: actions/checkout@v4

            - name: Setup Bun
              id: bun-setup
              uses: oven-sh/setup-bun@v2
              with:
                  bun-version: latest

            - name: Get Bun version
              id: bun-version
              run: echo "bun-version=$(bun --version)" >> $GITHUB_OUTPUT

            - name: Setup Deno
              id: deno-setup
              uses: denoland/setup-deno@v2
              with:
                  deno-version: v2.x

            - name: Get Deno version
              id: deno-version
              run: echo "deno-version=$(deno --version | head -n 1 | cut -d ' ' -f 2)" >> $GITHUB_OUTPUT

            - name: Setup Node.js
              id: node-setup
              uses: actions/setup-node@v4
              with:
                  node-version: '22'

            - name: Get Node version
              id: node-version
              run: echo "node-version=$(node --version | sed 's/^v//')" >> $GITHUB_OUTPUT

            - name: Install dependencies
              run: bun install

            - name: Install bombardier
              run: |
                  wget https://github.com/codesenberg/bombardier/releases/download/v1.2.6/bombardier-linux-arm64
                  chmod +x bombardier-linux-arm64
                  sudo mv bombardier-linux-arm64 /usr/local/bin/bombardier

            - name: Run benchmark
              run: |
                  FRAMEWORK="${{ matrix.framework }}"
                  TIME="${{ inputs.time || '30' }}"
                  CONNECTIONS="${{ inputs.connections || '64' }}"
                  echo "Running benchmark for $FRAMEWORK"
                  echo "Configuration: ${TIME}s duration, ${CONNECTIONS} connections"
                  bun run bench.ts --time=$TIME --connections=$CONNECTIONS "$FRAMEWORK"
              env:
                  NODE_ENV: production
                  BUN_VERSION: ${{ steps.bun-version.outputs.bun-version }}
                  DENO_VERSION: ${{ steps.deno-version.outputs.deno-version }}
                  NODE_VERSION: ${{ steps.node-version.outputs.node-version }}

            - name: Set artifact name
              id: artifact-name
              run: |
                  ARTIFACT_NAME=$(echo "${{ matrix.framework }}" | tr '/' '-')
                  echo "name=results-$ARTIFACT_NAME" >> $GITHUB_OUTPUT

            - name: Upload results
              uses: actions/upload-artifact@v4
              with:
                  name: ${{ steps.artifact-name.outputs.name }}
                  path: results/
                  retention-days: 30

    aggregate:
        name: Aggregate Results
        needs: [setup, benchmark]
        runs-on: ubuntu-latest
        timeout-minutes: 5
        if: always()
        steps:
            - uses: actions/checkout@v4

            - name: Setup Bun
              uses: oven-sh/setup-bun@v2
              with:
                  bun-version: latest

            - name: Download all results
              uses: actions/download-artifact@v4
              with:
                  path: artifacts/
                  pattern: results-*

            - name: Debug artifacts
              run: |
                  echo "=== Artifacts directory structure ==="
                  ls -la artifacts/ || echo "No artifacts directory"
                  if [ -d artifacts/ ]; then
                    find artifacts/ -type f -name "*.md" -o -name "*.txt" | head -20
                  fi

            - name: Aggregate results
              run: bun run scripts/aggregate-results.ts

            - name: Debug results
              run: |
                  echo "=== Results directory ==="
                  ls -la results/ || echo "No results directory"
                  if [ -f results/results.md ]; then
                    echo "=== results.md content ==="
                    cat results/results.md
                  else
                    echo "results/results.md not found"
                  fi

            - name: Upload aggregated results
              uses: actions/upload-artifact@v4
              with:
                  name: benchmark-results
                  path: results/
                  retention-days: 90
              if: always()

            - name: Display results
              run: |
                  if [ -f results/results.md ] && [ -s results/results.md ]; then
                    echo "## Benchmark Results" >> $GITHUB_STEP_SUMMARY
                    cat results/results.md >> $GITHUB_STEP_SUMMARY
                  else
                    echo "## Benchmark Results" >> $GITHUB_STEP_SUMMARY
                    echo "⚠️ No results found or results file is empty" >> $GITHUB_STEP_SUMMARY
                  fi
              if: always()
